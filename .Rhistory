nb <- n_bp - 2
# break points should be kind of equally distributed between the hotspot start
# and end + some noise
bb <- hs[i, start] + (hs[i, length]/nb * 1:nb * rnorm(nb, 1, 0.25))
while (any(bb > hs[i, end])) bb <- hs[i, start] + (hs[i, length]/nb * 1:nb * rnorm(nb, 1, 0.25))
bp[[i]] <- as.integer(c(hs[i, start], hs[i, end], bb))
}
# now each hotspot will have its own CNVRs based on the Break Points
cnvrs <- data.table()
for (i in hs[, hs]) {
# compute more and then keep only the unique combinations, should be much faster
# then doing it by row
tmp <- unique(t(replicate(500, sort(sample(bp[[i]], 2)))))
tmp <- tmp[sample(1:n_cnvrs, n_cnvrs), ]
tmp <- as.data.table(tmp)
colnames(tmp) <- c("start", "end")
setorder(tmp, start, end)
tmp[, `:=` (start = as.integer(start), end = as.integer(end),
length = as.integer(end-start+1), hs = i, cnvr = 1:n_cnvrs)]
# remove CNVRs that are too similar (>=75% reciprocal overlap)
if (remove_similar) {
tmp[, `:=` (rmv = F, ro = -1)]
for (ii in tmp[, cnvr]) {
if (tmp[ii, rmv]) next
# compute reciprocal overlap
st <- tmp[ii, start]; en <- tmp[ii, end]; ln <- tmp[ii, length]
tmp[, ro := pmin(end, en) - pmax(start, st) + 1]
# select overlapping CNVRs, including the one under consideration, ii
# only CNVRs smaller or equal to ii are considered
rmv <- tmp[length <= ln & ro >= 0.75*ln & rmv == F, ]
if (nrow(rmv) <= 1) next
# if there is a match other than tmp[ii], keep only the larger
ml <- max(rmv[, length])
cnvr_rm <- rmv[length != ml, cnvr]
tmp[cnvr %in% cnvr_rm, rmv := T]
}
tmp <- tmp[rmv == F, ]
tmp[, `:=` (ro = NULL, rmv = NULL)]
# rename the CNVRs from 1 to n
setorder(tmp, start, end)
tmp[, cnvr := 1:nrow(tmp)]
}
cnvrs <- rbind(cnvrs, tmp)
}
# sample n_cnvs CNVs
cnvs <- data.table()
for (i in hs[, hs]) {
tmp <- cnvrs[hs == i][sample(1:cnvrs[hs == i, max(cnvr)], n_cnvs, replace = T), ]
# add noise
n <- nrow(tmp)
# Noise is created by a random normal (centered in 1) * noise_lvl, moreover
# approximately 1 out of 5 CNVs will have a noise multiplier
# Noise_lvl is in basepairs, it represent a some markers essentially
tmp[, `:=` (start = as.integer(sample(c(1,-1),n,replace = T) * rnorm(n,1,1) * noise_lvl
* (sample(c(rep(0,4),noise_mult),n,replace=T)) + start),
end = as.integer(sample(c(1,-1),n,replace = T) * rnorm(n,1,1) * noise_lvl
* (sample(c(rep(0,4),noise_mult),n,replace=T)) + end))]
## SMALL CNVs can get a negative length now!!! ##
# update length
tmp[, length := end - start + 1]
# make sure no CNV has a negative start
tmp[start < 0, start := 0]
# small CNVs can have negative length after noise, I think swapping start and end
# should be enough to solve the issue
if (nrow(tmp[length < 0,]) >= 1) {
stt <- tmp[length < 0, start]
ent <- tmp[length < 0, end]
tmp[length < 0, `:=` (start = ent, end = stt)]
tmp[length < 0, length := end - start + 1]
}
cnvs <- rbind(cnvs, tmp)
}
setorder(cnvs, start, end)
cnvrs[, cnvr_sim := paste0(hs, "-", cnvr)]
cnvs[, cnvr_sim := paste0(hs, "-", cnvr)]
cnvrs[, cnvr := NULL]
cnvs[, cnvr := NULL]
if (!is.na(chr_name)) {
hs[, chr := chr_name]
cnvrs[, chr := chr_name]
cnvs[, chr := chr_name]
}
setnames(hs, "hs", "hs_sim")
setnames(cnvrs, "hs", "hs_sim")
setnames(cnvs, "hs", "hs_sim")
return(list(hotspots = hs, cnvrs = cnvrs, cnvs = cnvs))
}
#' Simulate chromosomes
#'
#' @import data.table
sim_chrs <- function(chrs = 1, starts = list(c(500000, 30000000, 55000000, 80000000, 105000000)),
noise_lvl = 10000, n_cnvs = 100) {
cnvs <- data.table()
cnvrs <- data.table()
hs<- data.table()
n <- 1
for (cc in chrs) {
for (i in starts[[cc]]) {
tmp <- sim_CNVs(2, 4, 5, 1500000, 3000000, n_cnvs, noise_lvl, 2, T, 1, 500000)
tmp$hotspots[, `:=` (start = start + i, end = end + i, hs_sim = paste0(hs_sim, letters[n]))]
tmp$cnvs[, `:=` (start = start + i, end = end + i, cnvr_sim = paste0(cnvr_sim, letters[n]))]
tmp$cnvrs[, `:=` (start = start + i, end = end + i, cnvr_sim = paste0(cnvr_sim, letters[n]))]
hs <- rbind(hs, tmp$hotspots)
cnvs <- rbind(cnvs, tmp$cnvs)
cnvrs <- rbind(cnvrs, tmp$cnvrs)
n <- n+1
}
}
return(list(hotspots = hs, cnvs = cnvs, cnvrs = cnvrs))
}
s1<-sim_CNVs()
library(data.table)
install.packages('data.table')
library(data.table)
s1<-sim_CNVs()
dim(s1)
length(s1)
dim(s1[1])
s1
s1$hotspots
s1$cnvrs
s1$cnvs
dim(s1$cnvs)
el<-792.59+541.36+777.79
el
el/3
calumEl<-el/3
deposit<- 4600*3
deposit-2000-calumEl
deposit
calumEl
13800-2000-703
28*2
56*8
56*7
372-239
#### testing area ####
devtools::document()
require(deSCA)
#### testing area ####
devtools::document()
require(devtools)
require(roxygen2)
#setwd("/home/xabier/Desktop/iPysch/packagesR/deSCA/")
setwd('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/')
#### testing area ####
devtools::document()
require(deSCA)
#### testing area ####
devtools::document()
require(deSCA)
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' )
paths = rep(10,'/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
paths = rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',10)
paths
which(path==paths)
path=paths[1]
which(path==paths)
t1<-computeValues(path=path)
count=count+1
count=0
count
count=0
for (path in paths){
print(length(paths)-count)
t1<-computeValues(path=path)
count=count+1
}
detectCores()
start <- Sys.time()
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
t5
start <- Sys.time()
t2<-runPar(paths,cores=5)
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
for (path in paths){
t1<-computeValues(path=path)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
t2<-runPar(paths,cores=5)
end <- Sys.time()
t5b<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5b, 'mins'))
print(paste0('Computing time ',t5, 'mins'))
print(paste0('Computing time ',t5b, 'mins'))
paths
paths = rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',80)
start <- Sys.time()
for (path in paths){
t1<-computeValues(path=path)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
t2<-runPar(paths,cores=8)
end <- Sys.time()
t5b<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5b, 'mins'))
print(paste0('Computing time ',t5, 'mins'))
print(paste0('Computing time ',t5b, 'mins'))
#### testing area ####
devtools::document()
require(deSCA)
start <- Sys.time()
t2<-runPar(paths[1:4],cores=4)
end <- Sys.time()
#### testing area ####
devtools::document()
require(deSCA)
t2<-runPar(paths[1:4],cores=4)
#### testing area ####
devtools::document()
require(deSCA)
t2<-runPar(paths[1:4],cores=4)
#### testing area ####
devtools::document()
require(deSCA)
t2<-runPar(paths[1:4],cores=4)
head(t2)
warning()
warnings()
?runPar
?redundant_code
?ReadSample
?sum
?computeValues
#### testing area ####
devtools::document()
require(deSCA)
#### testing area ####
devtools::document()
require(deSCA)
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' )
t2<-runPar(paths[1:4],cores=4)
head(Sample2)
Sample2<-ReadSample(RawFile = '/home/xabier/Desktop/iPysch/deeplearning/zuqi/data/Rajini/GSM2544143_PsychArray_NexusFinalReport1.txt',skip=10)
sample3<-subset(Sample2,Sample2$Chr=='X' & Sample2$B.Allele.Freq> 0.75 | Sample2$B.Allele.Freq<0.25)
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' )
s1<-ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' )
t1
s1<-ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
s1<-deSCA::ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz'
suppressPackageStartupMessages(library(data.table))
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
skip=0
Sample <- as.data.frame(Sample)
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
suppressPackageStartupMessages(library(data.table))
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
Sample
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE,fill=T)
head(Sample)
skip=10
Sample <- fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
#### testing area ####
devtools::document()
require(deSCA)
s1<-deSCA::ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',skip=10)
head(s1)
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' ,skip = 10)
head(t1)
names(Sample)
head(Sample)
#### testing area ####
devtools::document()
require(deSCA)
s1<-deSCA::ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',skip=10)
t1<-computeValues(path = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz' ,skip = 10)
0.24(134+24)
0.24(134+24)
0.24/(134+24)
2400/(134+24)
2400/(134+24)
1500/(132+15)
700/(58+7)
1000/(9+10)
#### testing area ####
devtools::document()
require(deSCA)
devtools::test()
201*2.18
237*0.46
s1<-deSCA::ReadSample(RawFile = '/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',skip=10)
dim(s1)
and SDs
head(s1)
# compute mean SDs
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
# compute mean SDs
r<-aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
paths<-rep(3,'/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
paths<-rep(3,'/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz')
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',3)
paths
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',10)
cores
detectCores()
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',8)
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',8)
start <- Sys.time()
for (path in paths)
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
r<-aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
end <- Sys.time()
paths
for (path in paths){
print(path)}
start <- Sys.time()
for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
r<-aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
end <- Sys.time()
t5b<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5b, 'mins'))
## parallel
f <- function(i) {
s1<-deSCA::ReadSample(RawFile = i,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
system.time(save1 <- lapply(paths, f))
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',8)
start <- Sys.time()
for (path in paths){
print(path)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
system.time(save1 <- lapply(paths, f))
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',8)
start <- Sys.time()
for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = i,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
paths<-rep('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/tests/data/array1.txt.gz',8)
start <- Sys.time()
for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
system.time(save1 <- mapply(paths, f))
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
paths
start <- Sys.time()
system.time(save1 <- mapply(paths, f))
end <- Sys.time()
system.time(save1 <- lapply(paths[1:2], f))
system.time(save1 <- mapply(paths[1:2], f))
## parallel
f <- function(i) {
s1<-deSCA::ReadSample(RawFile = paths[i],skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
system.time(save1 <- lapply(1:2, f))
system.time(save1 <- mapply(1:2, f))
## parallel
f <- function(i) {
#s1<-deSCA::ReadSample(RawFile = paths[i],skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
system.time(save1 <- mapply(1:2, f))
system.time(save1 <- mapply(1:2, FUN=f))
## parallel
f <- function(i) {
s1<-deSCA::ReadSample(RawFile = paths[i],skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
system.time(save1 <- mapply(1:2, FUN=f))
system.time(save1 <- lapply(1:2, FUN=f))
system.time(save1 <- mapply(1:2, FUN=f))
system.time(save1 <- lapply(1:2, FUN=f))
system.time(save1 <- mapply(1:8, FUN=f))
system.time(save1 <- lapply(1:8, FUN=f))
start <- Sys.time()
for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
system.time(save1 <- mapply(1:8, FUN=f))
#system.time(save1 <- lapply(1:8, FUN=f))
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
start <- Sys.time()
for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}
end <- Sys.time()
t5<-as.numeric (end - start, units = "mins") # or secs ..
print(paste0('Computing time ',t5, 'mins'))
library(rbenchmark)
install.packages('rbenchmark')
library(rbenchmark)
benchmark(
'loop'={for (path in paths){
print(path)
s1<-deSCA::ReadSample(RawFile = path,skip=10)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
}},
'mappy'={system.time(save1 <- mapply(1:8, FUN=f))
},
replications = 2,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
Sample <- fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)
Sample <- read.csv(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)
Sample <- read.csv(RawFile, head=F, sep="\t")
benchmark('fread'{Sample <- fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)},
'read.csv'{Sample <- read.csv(RawFile, head=F, sep="\t")},
replications = 10,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
ample <- fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)}
ample <- fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)
benchmark('fread'={Sample <- fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)},
'read.csv'={Sample <- read.csv(RawFile, head=F, sep="\t")},
replications = 10,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
s1<-fread(RawFile, head=F, sep="\t", skip=skip, verbose=FALSE)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
head(s1)
s1<-fread(RawFile, head=T, sep="\t", skip=skip, verbose=FALSE)
aggregate(s1$Log.R.Ratio, list(s1$Chr), FUN=mean)
head(s1)
aggregate(s1$`Log R Ratio`, list(s1$Chr), FUN=mean)
aggregate(s1$X, list(s1$Chr), FUN=mean)
for (path in paths[1:2]){f(path)}
f <- function(i) {
s1<-fread(i, head=T, sep="\t", skip=skip, verbose=FALSE)
aggregate(s1$X, list(s1$Chr), FUN=mean)
}
for (path in paths[1:2]){f(path)
}
benchmark(
'loop'={for (path in paths[1:8]){f(path)}
},
'mapply'={system.time(save1 <- mapply(1:8, FUN=f))
},
replications = 10,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self")
)
f1 <- function(i) {
s1<-fread(i, head=T, sep="\t", skip=skip, verbose=FALSE)
aggregate(s1$X, list(s1$Chr), FUN=mean)
}
f2 <- function(i) {
s1<-fread(paths[i], head=T, sep="\t", skip=skip, verbose=FALSE)
aggregate(s1$X, list(s1$Chr), FUN=mean)
}
mapply'={system.time(save1 <- mapply(1:8, FUN=f))
}
'
'mapply'={system.time(save1 <- mapply(1:8, FUN=f))
}
system.time(save1 <- mapply(1:8, FUN=f2))
benchmark(
'loop'={for (path in paths[1:2]){f1(path)}
},
'mapply'={system.time(save1 <- mapply(1:2, FUN=f2))
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self")
)
benchmark(
'loop'={for (path in paths[1:8]){f1(path)}
},
'mapply'={system.time(save1 <- mapply(1:8, FUN=f2))
},
replications = 20,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self")
)
