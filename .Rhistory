forestplot(labeltext = tabletext,
forestplot(labeltext = tabletext,
clip = c(0.1, 2.5),
col = fpColors(box = "royalblue",
)
)
)
)
)
)
# Cochrane data from the 'rmeta'-package
cochrane_from_rmeta <- structure(list(mean  = c(NA, NA, 0.578, 0.165, 0.246, 0.700, 0.348, 0.139, 1.017, NA, 0.531),
lower = c(NA, NA, 0.372, 0.018, 0.072, 0.333, 0.083, 0.016, 0.365, NA, 0.386),
upper = c(NA, NA, 0.898, 1.517, 0.833, 1.474, 1.455, 1.209, 2.831, NA, 0.731)),
.Names = c("mean", "lower", "upper"),
row.names = c(NA, -11L),
class = "data.frame")
tabletext <- cbind(c("", "Study", "Auckland", "Block", "Doran", "Gamsu", "Morrison", "Papageorgiou", "Tauesch", NA, "Summary"),
c("Deaths", "(steroid)", "36", "1", "4", "14", "3", "1", "8", NA, NA),
c("Deaths", "(placebo)", "60", "5", "11", "20", "7", "7", "10", NA, NA),
c("", "OR", "0.58", "0.16", "0.25", "0.70", "0.35", "0.14", "1.02", NA, "0.53"))
cochrane_from_rmeta %>%
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
cochrane_from_rmeta %>%
forestplot(labeltext = tabletext,
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
clip = c(0.1, 2.5),
xlog = TRUE,
col = fpColors(box = "royalblue",
line = "darkblue",
cochrane_from_rmeta %>%
forestplot(labeltext = tabletext,
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
clip = c(0.1, 2.5),
xlog = TRUE,
col = fpColors(box = "royalblue",
line = "darkblue",
summary = "royalblue"))
)
)
)))
cochrane_from_rmeta %>%
forestplot(labeltext = tabletext,
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
clip = c(0.1, 2.5),
xlog = TRUE,
col = fpColors(box = "royalblue",
line = "darkblue",
summary = "royalblue"))
library(dplyr)
# Cochrane data from the 'rmeta'-package
cochrane_from_rmeta <- structure(list(mean  = c(NA, NA, 0.578, 0.165, 0.246, 0.700, 0.348, 0.139, 1.017, NA, 0.531),
lower = c(NA, NA, 0.372, 0.018, 0.072, 0.333, 0.083, 0.016, 0.365, NA, 0.386),
upper = c(NA, NA, 0.898, 1.517, 0.833, 1.474, 1.455, 1.209, 2.831, NA, 0.731)),
.Names = c("mean", "lower", "upper"),
row.names = c(NA, -11L),
class = "data.frame")
tabletext <- cbind(c("", "Study", "Auckland", "Block", "Doran", "Gamsu", "Morrison", "Papageorgiou", "Tauesch", NA, "Summary"),
c("Deaths", "(steroid)", "36", "1", "4", "14", "3", "1", "8", NA, NA),
c("Deaths", "(placebo)", "60", "5", "11", "20", "7", "7", "10", NA, NA),
c("", "OR", "0.58", "0.16", "0.25", "0.70", "0.35", "0.14", "1.02", NA, "0.53"))
cochrane_from_rmeta %>%
forestplot(labeltext = tabletext,
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
clip = c(0.1, 2.5),
xlog = TRUE,
col = fpColors(box = "royalblue",
line = "darkblue",
summary = "royalblue"))
install.packages('tidyr')
library(tidyr)
cochrane_from_rmeta %>%
forestplot(labeltext = tabletext,
is.summary = c(rep(TRUE, 2), rep(FALSE, 8), TRUE),
clip = c(0.1, 2.5),
xlog = TRUE,
col = fpColors(box = "royalblue",
line = "darkblue",
summary = "royalblue"))
dfHRQoL %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp = fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = TRUE)),
xlab = "EQ-5D index")
data(dfHRQoL)
dfHRQoL %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp = fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = TRUE)),
xlab = "EQ-5D index")
dfHRQoL
fpDrawNormalCI
dfHRQoL %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp = fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = TRUE)),
xlab = "EQ-5D index")
dfHRQoL
as.data.frame(dfHRQoL)
f1<-as.data.frame(dfHRQoL)
dfHRQoL %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
fn.ci_norm
dfHRQoL2<-dfHRQoL
dfHRQoL2$labeltext
dfHRQoL2$labeltext2<-'xabi'
dfHRQoL2
dfHRQoL2 %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2 %>%
group_by(group) %>%
forestplot(fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2
names(dfHRQoL2)
row.names(dfHRQoL2)
forestplot(dfHRQoL2$labeltext)
f1
forestplot(f1[,c(2,3,4)])
?forestplot
forestplot(labeltext=f1$labeltext,f1[,c(2,3,4)])
?forestplot
forestplot(labeltext=f1$labeltext,f1[,c(2,3,4)],group_by(f1$group))
dfHRQoL2 %>%
group_by(group) %>%
forestplot(labeltext=f1$labeltext,fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2 %>%
group_by(group) %>%
forestplot(labeltext=labeltext,fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2 %>%
group_by(group) %>%
forestplot(labeltext=labeltext2,fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL2
dfHRQoL2[c(1,2,3,4),]
dfHRQoL2[c(-3),]
dfHRQoL2
dfHRQoL2[c(-3),]
dfHRQoL23<-dfHRQoL2[c(-3),]
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3<-dfHRQoL2[c(-3),]
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3<-dfHRQoL2
dfHRQoL3$mean
dfHRQoL3$mean[5]
dfHRQoL3$mean[5]<-NA
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3
dfHRQoL3$mean[5]<-NA
dfHRQoL3$upper[5]<-NA
dfHRQoL3$lower[5]<-NA
dfHRQoL3
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3
dfHRQoL3$mean[5]<-0
dfHRQoL3$[5]<-0
dfHRQoL3$lower[5]<-0
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3
dfHRQoL3$upper[5]<-0
dfHRQoL3
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
dfHRQoL3$mean[5]<-1000
dfHRQoL3$upper[5]<-1000
dfHRQoL3$lower[5]<-10000
dfHRQoL3 %>%
group_by(group) %>%
forestplot(labeltext=c(labeltext2, labeltext),fn.ci_norm = c(fpDrawNormalCI, fpDrawCircleCI),
boxsize = .25, # We set the box size to better visualize the type
line.margin = .1, # We need to add this to avoid crowding
clip = c(-.125, 0.075),
shapes_gp =
fpShapesGp(box = c("blue", "darkred") %>% lapply(function(x) gpar(fill = x, col = "#555555")),
default = gpar(vertices = FALSE)),
xlab = "EQ-5D index")
sim_CNVs <- function(n_hotspots = 2, n_bp = 3, n_cnvrs = NA, hotspot_size = 1500000,
chr_size = 50000000, n_cnvs = 100, noise_lvl = 10000, noise_mult = 2,
remove_similar = T, chr_name = NA, chr_start = 100000) {
# if not specified otherwise, all breakpoints are used
if (is.na(n_cnvrs)) n_cnvrs <- factorial(n_bp) / (factorial(2) * factorial(n_bp-2))
max_hotspot_len <- (chr_size-chr_start)/n_hotspots - 100000
# hotspots are not overlapping, thus each of them has its "chunk" of chromosome
hotspots_seps <- (max_hotspot_len * 0:(n_cnvrs) ) + chr_start
lengths <- round(abs(rnorm(n_hotspots, 1, 0.25)) * hotspot_size)
while (any(lengths > max_hotspot_len)) lengths <- abs(rnorm(n_hotspots, 1, 0.25)) * hotspot_size
sts <- c()
# start of a CNVR needs to be between the start of its "chunk" of chromosome
# and the end of it - its actual size (of the CNVR)
for (i in 1:n_hotspots)
sts <- c(sts, sample(seq(hotspots_seps[i], hotspots_seps[i+1] - lengths[i], by = 100), size = 1))
hs <- data.table(hs = 1:n_hotspots, start = as.integer(sts), end = as.integer(sts + lengths),
length = as.integer(lengths))
bp <- list()
for (i in hs[, hs]) {
nb <- n_bp - 2
# break points should be kind of equally distributed between the hotspot start
# and end + some noise
bb <- hs[i, start] + (hs[i, length]/nb * 1:nb * rnorm(nb, 1, 0.25))
while (any(bb > hs[i, end])) bb <- hs[i, start] + (hs[i, length]/nb * 1:nb * rnorm(nb, 1, 0.25))
bp[[i]] <- as.integer(c(hs[i, start], hs[i, end], bb))
}
# now each hotspot will have its own CNVRs based on the Break Points
cnvrs <- data.table()
for (i in hs[, hs]) {
# compute more and then keep only the unique combinations, should be much faster
# then doing it by row
tmp <- unique(t(replicate(500, sort(sample(bp[[i]], 2)))))
tmp <- tmp[sample(1:n_cnvrs, n_cnvrs), ]
tmp <- as.data.table(tmp)
colnames(tmp) <- c("start", "end")
setorder(tmp, start, end)
tmp[, `:=` (start = as.integer(start), end = as.integer(end),
length = as.integer(end-start+1), hs = i, cnvr = 1:n_cnvrs)]
# remove CNVRs that are too similar (>=75% reciprocal overlap)
if (remove_similar) {
tmp[, `:=` (rmv = F, ro = -1)]
for (ii in tmp[, cnvr]) {
if (tmp[ii, rmv]) next
# compute reciprocal overlap
st <- tmp[ii, start]; en <- tmp[ii, end]; ln <- tmp[ii, length]
tmp[, ro := pmin(end, en) - pmax(start, st) + 1]
# select overlapping CNVRs, including the one under consideration, ii
# only CNVRs smaller or equal to ii are considered
rmv <- tmp[length <= ln & ro >= 0.75*ln & rmv == F, ]
if (nrow(rmv) <= 1) next
# if there is a match other than tmp[ii], keep only the larger
ml <- max(rmv[, length])
cnvr_rm <- rmv[length != ml, cnvr]
tmp[cnvr %in% cnvr_rm, rmv := T]
}
tmp <- tmp[rmv == F, ]
tmp[, `:=` (ro = NULL, rmv = NULL)]
# rename the CNVRs from 1 to n
setorder(tmp, start, end)
tmp[, cnvr := 1:nrow(tmp)]
}
cnvrs <- rbind(cnvrs, tmp)
}
# sample n_cnvs CNVs
cnvs <- data.table()
for (i in hs[, hs]) {
tmp <- cnvrs[hs == i][sample(1:cnvrs[hs == i, max(cnvr)], n_cnvs, replace = T), ]
# add noise
n <- nrow(tmp)
# Noise is created by a random normal (centered in 1) * noise_lvl, moreover
# approximately 1 out of 5 CNVs will have a noise multiplier
# Noise_lvl is in basepairs, it represent a some markers essentially
tmp[, `:=` (start = as.integer(sample(c(1,-1),n,replace = T) * rnorm(n,1,1) * noise_lvl
* (sample(c(rep(0,4),noise_mult),n,replace=T)) + start),
end = as.integer(sample(c(1,-1),n,replace = T) * rnorm(n,1,1) * noise_lvl
* (sample(c(rep(0,4),noise_mult),n,replace=T)) + end))]
## SMALL CNVs can get a negative length now!!! ##
# update length
tmp[, length := end - start + 1]
# make sure no CNV has a negative start
tmp[start < 0, start := 0]
# small CNVs can have negative length after noise, I think swapping start and end
# should be enough to solve the issue
if (nrow(tmp[length < 0,]) >= 1) {
stt <- tmp[length < 0, start]
ent <- tmp[length < 0, end]
tmp[length < 0, `:=` (start = ent, end = stt)]
tmp[length < 0, length := end - start + 1]
}
cnvs <- rbind(cnvs, tmp)
}
setorder(cnvs, start, end)
cnvrs[, cnvr_sim := paste0(hs, "-", cnvr)]
cnvs[, cnvr_sim := paste0(hs, "-", cnvr)]
cnvrs[, cnvr := NULL]
cnvs[, cnvr := NULL]
if (!is.na(chr_name)) {
hs[, chr := chr_name]
cnvrs[, chr := chr_name]
cnvs[, chr := chr_name]
}
setnames(hs, "hs", "hs_sim")
setnames(cnvrs, "hs", "hs_sim")
setnames(cnvs, "hs", "hs_sim")
return(list(hotspots = hs, cnvrs = cnvrs, cnvs = cnvs))
}
#' Simulate chromosomes
#'
#' @import data.table
sim_chrs <- function(chrs = 1, starts = list(c(500000, 30000000, 55000000, 80000000, 105000000)),
noise_lvl = 10000, n_cnvs = 100) {
cnvs <- data.table()
cnvrs <- data.table()
hs<- data.table()
n <- 1
for (cc in chrs) {
for (i in starts[[cc]]) {
tmp <- sim_CNVs(2, 4, 5, 1500000, 3000000, n_cnvs, noise_lvl, 2, T, 1, 500000)
tmp$hotspots[, `:=` (start = start + i, end = end + i, hs_sim = paste0(hs_sim, letters[n]))]
tmp$cnvs[, `:=` (start = start + i, end = end + i, cnvr_sim = paste0(cnvr_sim, letters[n]))]
tmp$cnvrs[, `:=` (start = start + i, end = end + i, cnvr_sim = paste0(cnvr_sim, letters[n]))]
hs <- rbind(hs, tmp$hotspots)
cnvs <- rbind(cnvs, tmp$cnvs)
cnvrs <- rbind(cnvrs, tmp$cnvrs)
n <- n+1
}
}
return(list(hotspots = hs, cnvs = cnvs, cnvrs = cnvrs))
}
s1<-sim_CNVs()
library(data.table)
install.packages('data.table')
library(data.table)
s1<-sim_CNVs()
dim(s1)
length(s1)
dim(s1[1])
s1
s1$hotspots
s1$cnvrs
s1$cnvs
dim(s1$cnvs)
el<-792.59+541.36+777.79
el
el/3
calumEl<-el/3
deposit<- 4600*3
deposit-2000-calumEl
deposit
calumEl
13800-2000-703
require(deSCA)
## trash ####
devtools::document()
setwd('/Users/xabier/Desktop/ipsych/reviseThesis/paper2/packagesR/deSCA/')
devtools::document()
require(deSCA)
sample1 <- simulMales(50000,0,0,0.07,0.07,0.35,0.35)
sample1 <- simulMales(100000,0,0,0.06,0.06,0.45,0.45)
start_time<- Sys.time()
dataFrame2<-sample1[,c(1,2)]
#dataFrame<-sample1[,c(1,2)]
dim(dataFrame2)
#plot(dataFrame2,pch=20,col='blue')
f2 <- optimizeClusterMales(dataFrame2, interClusProb = 0.7)
stop_start<- Sys.time()
print(stop_start-start_time)
plotMaleClusters(dataFrame2,f2)
# git token: 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
#  Males ####
sample1 <- simulMales(100 000,0,0,0.06,0.06,0.45,0.45)
#  Males ####
sample1 <- simulMales(100000,0,0,0.06,0.06,0.45,0.45)
start_time<- Sys.time()
dataFrame2<-sample1[,c(1,2)]
#dataFrame<-sample1[,c(1,2)]
dim(dataFrame2)
#plot(dataFrame2,pch=20,col='blue')
f2 <- optimizeClusterMales(dataFrame2, interClusProb = 0.7)
stop_start<- Sys.time()
print(stop_start-start_time)
plotMaleClusters(dataFrame2,f2)
sample1 <- simulMales(1000000,0,0,0.06,0.06,0.45,0.45)
start_time<- Sys.time()
dataFrame2<-sample1[,c(1,2)]
#dataFrame<-sample1[,c(1,2)]
dim(dataFrame2)
#plot(dataFrame2,pch=20,col='blue')
f2 <- optimizeClusterMales(dataFrame2, interClusProb = 0.7)
stop_start<- Sys.time()
print(stop_start-start_time)
plotMaleClusters(dataFrame2,f2)
# Females ####
sample1 <- simulFemales(100000,0,0,0.06,0.06,0.45,0.45)
start_time<- Sys.time()
dataFrame2<-sample1[,c(1,2)]
#dataFrame<-sample1[,c(1,2)]
f2 <- optimizeClusterFemales(dataFrame2, interClusProb = 0.7)
stop_start<- Sys.time()
print(stop_start-start_time)
plotFemaleClusters(dataFrame2,f2)
sample1 <- simulFemales(1000000,0,0,0.06,0.06,0.45,0.45)
start_time<- Sys.time()
dataFrame2<-sample1[,c(1,2)]
#dataFrame<-sample1[,c(1,2)]
f2 <- optimizeClusterFemales(dataFrame2, interClusProb = 0.7)
stop_start<- Sys.time()
print(stop_start-start_time)
plotFemaleClusters(dataFrame2,f2)
